
/* MACHINE GENERATED By Halide. */

pure int max(int x, int y) = x > y ? x : y;

pure int min(int x, int y) = x > y ? y : x;

pure rational max(rational x, rational y) = x > y ? x : y;

pure rational min(rational x, rational y) = x > y ? y : x;

pure int abs(int x) = x >= 0 ? x : -x;

pure int hdiv(int x, int y) = y == 0 ? 0 : x / y;

pure int hmod(int x, int y) = y == 0 ? 0 : x % y;

pure rational abs(rational x) = x >= 0 ? x : -x;

pure rational ceil_f32(rational x) = is_int(x) ? x : int_to_rational(rational_to_int(x) + 1);

pure rational ceil_f64(rational x) = is_int(x) ? x : int_to_rational(rational_to_int(x) + 1);

prover_function int rational_to_int(rational r) \smtlib `(_ to_int)`;

prover_function rational int_to_rational(int i) \smtlib `(_ to_real)`;

prover_function bool is_int(rational r) \smtlib `(_ is_int)`;

prover_function rational div_rat_(rational l, rational r) \smtlib `(_ /)`;

prover_function rational pow_f32(rational l, rational r) \smtlib `(_ ^)`;

pure rational div_rat(rational l, rational r) = div_rat_(l, r);

pure rational fast_inverse_f32(rational x) = div_rat(1.0f, x);

pure int round_f32(rational x) = is_int(x) ? rational_to_int(x) : rational_to_int(x + 0.5f);

class halide_buffer_int {
    int[] host;
    int min_0;
    int min_1;
    int min_2;
    int min_3;

    int extent_0;
    int extent_1;
    int extent_2;
    int extent_3;

    int stride_0;
    int stride_1;
    int stride_2;
    int stride_3;
}

requires Perm(b.host, read);
pure int[] _halide_buffer_get_host_int(halide_buffer_int b) = b.host;

requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.min_0, read);
requires dim == 1 ==> Perm(b.min_1, read);
requires dim == 2 ==> Perm(b.min_2, read);
requires dim == 3 ==> Perm(b.min_3, read);
pure int _halide_buffer_get_min_int(halide_buffer_int b, int dim) = dim == 0 ? b.min_0 : (dim == 1 ? b.min_1 : (dim == 2 ? b.min_2 : b.min_3));

requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.stride_0, read);
requires dim == 1 ==> Perm(b.stride_1, read);
requires dim == 2 ==> Perm(b.stride_2, read);
requires dim == 3 ==> Perm(b.stride_3, read);
pure int _halide_buffer_get_stride_int(halide_buffer_int b, int dim) = dim == 0 ? b.stride_0 : (dim == 1 ? b.stride_1 : (dim == 2 ? b.stride_2 : b.stride_3));

requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.extent_0, read);
requires dim == 1 ==> Perm(b.extent_1, read);
requires dim == 2 ==> Perm(b.extent_2, read);
requires dim == 3 ==> Perm(b.extent_3, read);
pure int _halide_buffer_get_extent_int(halide_buffer_int b, int dim) = dim == 0 ? b.extent_0 : (dim == 1 ? b.extent_1 : (dim == 2 ? b.extent_2 : b.extent_3));

class halide_buffer_rational {
    rational[] host;
    int min_0;
    int min_1;
    int min_2;
    int min_3;

    int extent_0;
    int extent_1;
    int extent_2;
    int extent_3;

    int stride_0;
    int stride_1;
    int stride_2;
    int stride_3;
}

requires Perm(b.host, read);
pure rational[] _halide_buffer_get_host_rational(halide_buffer_rational b) = b.host;

requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.min_0, read);
requires dim == 1 ==> Perm(b.min_1, read);
requires dim == 2 ==> Perm(b.min_2, read);
requires dim == 3 ==> Perm(b.min_3, read);
pure int _halide_buffer_get_min_rational(halide_buffer_rational b, int dim) = dim == 0 ? b.min_0 : (dim == 1 ? b.min_1 : (dim == 2 ? b.min_2 : b.min_3));

requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.stride_0, read);
requires dim == 1 ==> Perm(b.stride_1, read);
requires dim == 2 ==> Perm(b.stride_2, read);
requires dim == 3 ==> Perm(b.stride_3, read);
pure int _halide_buffer_get_stride_rational(halide_buffer_rational b, int dim) = dim == 0 ? b.stride_0 : (dim == 1 ? b.stride_1 : (dim == 2 ? b.stride_2 : b.stride_3));

requires 0 <= dim && dim < 4;
requires dim == 0 ==> Perm(b.extent_0, read);
requires dim == 1 ==> Perm(b.extent_1, read);
requires dim == 2 ==> Perm(b.extent_2, read);
requires dim == 3 ==> Perm(b.extent_3, read);
pure int _halide_buffer_get_extent_rational(halide_buffer_rational b, int dim) = dim == 0 ? b.extent_0 : (dim == 1 ? b.extent_1 : (dim == 2 ? b.extent_2 : b.extent_3));



pure int pure_input(int i);

pure rational pure_matrix_3200(int i);

pure rational pure_matrix_7000(int i);

pure int pure_processed(int i);

 context Perm(_input_buffer.host, read) ** _input_buffer.host != null;
 context Perm(_input_buffer.min_0, read) ** Perm(_input_buffer.stride_0, read) ** Perm(_input_buffer.extent_0, read);
 context Perm(_input_buffer.min_1, read) ** Perm(_input_buffer.stride_1, read) ** Perm(_input_buffer.extent_1, read);
 context _input_buffer.host.length == 1  + abs(_input_buffer.stride_0) * (_input_buffer.extent_0 - 1) + abs(_input_buffer.stride_1) * (_input_buffer.extent_1 - 1);
 context Perm(_matrix_3200_buffer.host, read) ** _matrix_3200_buffer.host != null;
 context Perm(_matrix_3200_buffer.min_0, read) ** Perm(_matrix_3200_buffer.stride_0, read) ** Perm(_matrix_3200_buffer.extent_0, read);
 context Perm(_matrix_3200_buffer.min_1, read) ** Perm(_matrix_3200_buffer.stride_1, read) ** Perm(_matrix_3200_buffer.extent_1, read);
 context _matrix_3200_buffer.host.length == 1  + abs(_matrix_3200_buffer.stride_0) * (_matrix_3200_buffer.extent_0 - 1) + abs(_matrix_3200_buffer.stride_1) * (_matrix_3200_buffer.extent_1 - 1);
 context Perm(_matrix_7000_buffer.host, read) ** _matrix_7000_buffer.host != null;
 context Perm(_matrix_7000_buffer.min_0, read) ** Perm(_matrix_7000_buffer.stride_0, read) ** Perm(_matrix_7000_buffer.extent_0, read);
 context Perm(_matrix_7000_buffer.min_1, read) ** Perm(_matrix_7000_buffer.stride_1, read) ** Perm(_matrix_7000_buffer.extent_1, read);
 context _matrix_7000_buffer.host.length == 1  + abs(_matrix_7000_buffer.stride_0) * (_matrix_7000_buffer.extent_0 - 1) + abs(_matrix_7000_buffer.stride_1) * (_matrix_7000_buffer.extent_1 - 1);
 context Perm(_processed_buffer.host, read) ** _processed_buffer.host != null;
 context Perm(_processed_buffer.min_0, read) ** Perm(_processed_buffer.stride_0, read) ** Perm(_processed_buffer.extent_0, read);
 context Perm(_processed_buffer.min_1, read) ** Perm(_processed_buffer.stride_1, read) ** Perm(_processed_buffer.extent_1, read);
 context Perm(_processed_buffer.min_2, read) ** Perm(_processed_buffer.stride_2, read) ** Perm(_processed_buffer.extent_2, read);
 context _processed_buffer.host.length == 1  + abs(_processed_buffer.stride_0) * (_processed_buffer.extent_0 - 1) + abs(_processed_buffer.stride_1) * (_processed_buffer.extent_1 - 1) + abs(_processed_buffer.stride_2) * (_processed_buffer.extent_2 - 1);
 requires _matrix_3200_buffer.host != _input_buffer.host;
 requires _matrix_7000_buffer.host != _input_buffer.host;
 requires _matrix_7000_buffer.host != _matrix_3200_buffer.host;
 requires _processed_buffer.host != _input_buffer.host;
 requires _processed_buffer.host != _matrix_3200_buffer.host;
 requires _processed_buffer.host != _matrix_7000_buffer.host;
 context ((_input_buffer.min_0 == 0) && (_input_buffer.extent_0 == 2592)) && (_input_buffer.stride_0 == 1);
 context ((_input_buffer.min_1 == 0) && (_input_buffer.extent_1 == 1968)) && (_input_buffer.stride_1 == 2592);
 context (\forall* int _0, int _1; (((0 <= _0) && (_0 < 2592)) && (0 <= _1)) && (_1 < 1968); Perm(_input_buffer.host[(_1*2592) + _0], 1\2));
 context (\forall int _0, int _1; (((0 <= _0) && (_0 < 2592)) && (0 <= _1)) && (_1 < 1968); _input_buffer.host[(_1*2592) + _0] == pure_input((_1*2592) + _0));
 context ((_matrix_3200_buffer.min_0 == 0) && (_matrix_3200_buffer.extent_0 == 4)) && (_matrix_3200_buffer.stride_0 == 1);
 context ((_matrix_3200_buffer.min_1 == 0) && (_matrix_3200_buffer.extent_1 == 3)) && (_matrix_3200_buffer.stride_1 == 4);
 context (\forall* int _0, int _1; (((0 <= _0) && (_0 < 4)) && (0 <= _1)) && (_1 < 3); Perm(_matrix_3200_buffer.host[(_1*4) + _0], 1\2));
 context (\forall int _0, int _1; (((0 <= _0) && (_0 < 4)) && (0 <= _1)) && (_1 < 3); _matrix_3200_buffer.host[(_1*4) + _0] == pure_matrix_3200((_1*4) + _0));
 context ((_matrix_7000_buffer.min_0 == 0) && (_matrix_7000_buffer.extent_0 == 4)) && (_matrix_7000_buffer.stride_0 == 1);
 context ((_matrix_7000_buffer.min_1 == 0) && (_matrix_7000_buffer.extent_1 == 3)) && (_matrix_7000_buffer.stride_1 == 4);
 context (\forall* int _0, int _1; (((0 <= _0) && (_0 < 4)) && (0 <= _1)) && (_1 < 3); Perm(_matrix_7000_buffer.host[(_1*4) + _0], 1\2));
 context (\forall int _0, int _1; (((0 <= _0) && (_0 < 4)) && (0 <= _1)) && (_1 < 3); _matrix_7000_buffer.host[(_1*4) + _0] == pure_matrix_7000((_1*4) + _0));
 context ((_processed_buffer.min_0 == 0) && (_processed_buffer.extent_0 == 2560)) && (_processed_buffer.stride_0 == 1);
 context ((_processed_buffer.min_1 == 0) && (_processed_buffer.extent_1 == 1920)) && (_processed_buffer.stride_1 == 2560);
 context ((_processed_buffer.min_2 == 0) && (_processed_buffer.extent_2 == 3)) && (_processed_buffer.stride_2 == 4915200);
 context (\forall* int _0, int _1, int _2; (((((0 <= _0) && (_0 < 2560)) && (0 <= _1)) && (_1 < 1920)) && (0 <= _2)) && (_2 < 3); Perm(_processed_buffer.host[(_2*4915200) + ((_1*2560) + _0)], 1\1));
int camera_pipe_mem(halide_buffer_int _input_buffer, halide_buffer_rational _matrix_3200_buffer, halide_buffer_rational _matrix_7000_buffer, halide_buffer_int _processed_buffer) {
 int[] _input = _halide_buffer_get_host_int(_input_buffer);
 int _input_min_0 = _halide_buffer_get_min_int(_input_buffer, 0);
 int _input_extent_0 = _halide_buffer_get_extent_int(_input_buffer, 0);
 int _input_stride_0 = _halide_buffer_get_stride_int(_input_buffer, 0);
 int _input_min_1 = _halide_buffer_get_min_int(_input_buffer, 1);
 int _input_extent_1 = _halide_buffer_get_extent_int(_input_buffer, 1);
 int _input_stride_1 = _halide_buffer_get_stride_int(_input_buffer, 1);
 rational[] _matrix_3200 = _halide_buffer_get_host_rational(_matrix_3200_buffer);
 int _matrix_3200_min_0 = _halide_buffer_get_min_rational(_matrix_3200_buffer, 0);
 int _matrix_3200_extent_0 = _halide_buffer_get_extent_rational(_matrix_3200_buffer, 0);
 int _matrix_3200_stride_0 = _halide_buffer_get_stride_rational(_matrix_3200_buffer, 0);
 int _matrix_3200_min_1 = _halide_buffer_get_min_rational(_matrix_3200_buffer, 1);
 int _matrix_3200_extent_1 = _halide_buffer_get_extent_rational(_matrix_3200_buffer, 1);
 int _matrix_3200_stride_1 = _halide_buffer_get_stride_rational(_matrix_3200_buffer, 1);
 rational[] _matrix_7000 = _halide_buffer_get_host_rational(_matrix_7000_buffer);
 int _matrix_7000_min_0 = _halide_buffer_get_min_rational(_matrix_7000_buffer, 0);
 int _matrix_7000_extent_0 = _halide_buffer_get_extent_rational(_matrix_7000_buffer, 0);
 int _matrix_7000_stride_0 = _halide_buffer_get_stride_rational(_matrix_7000_buffer, 0);
 int _matrix_7000_min_1 = _halide_buffer_get_min_rational(_matrix_7000_buffer, 1);
 int _matrix_7000_extent_1 = _halide_buffer_get_extent_rational(_matrix_7000_buffer, 1);
 int _matrix_7000_stride_1 = _halide_buffer_get_stride_rational(_matrix_7000_buffer, 1);
 int[] _processed = _halide_buffer_get_host_int(_processed_buffer);
 int _processed_min_0 = _halide_buffer_get_min_int(_processed_buffer, 0);
 int _processed_extent_0 = _halide_buffer_get_extent_int(_processed_buffer, 0);
 int _processed_stride_0 = _halide_buffer_get_stride_int(_processed_buffer, 0);
 int _processed_min_1 = _halide_buffer_get_min_int(_processed_buffer, 1);
 int _processed_extent_1 = _halide_buffer_get_extent_int(_processed_buffer, 1);
 int _processed_stride_1 = _halide_buffer_get_stride_int(_processed_buffer, 1);
 int _processed_min_2 = _halide_buffer_get_min_int(_processed_buffer, 2);
 int _processed_extent_2 = _halide_buffer_get_extent_int(_processed_buffer, 2);
 int _processed_stride_2 = _halide_buffer_get_stride_int(_processed_buffer, 2);
 {
  int[] _curve = new int[1024];
  // produce curve
   loop_invariant 0 <= _curve_s0_v0 && _curve_s0_v0 <= 0 + 1024;
   loop_invariant (\forall* int _curve_s0_v0_forall; (0 <= _curve_s0_v0_forall) && (_curve_s0_v0_forall < 1024); Perm(_curve[_curve_s0_v0_forall], 1\1));
  for (int _curve_s0_v0 = 0; _curve_s0_v0 < 0 + 1024; _curve_s0_v0++)
  {
   rational _t3215 = pow_f32(max(min((int_to_rational((_curve_s0_v0 + -25)) * 0.001002), 1.000000), 0.000000), 0.500000);
   _curve[_curve_s0_v0] = ((25 < _curve_s0_v0) ? rational_to_int((max(min((((0.500000 < _t3215) ? (0.414214 - (((1.000000 - _t3215) * ((_t3215 * -0.828427) + 0.828427)) + (_t3215 * -0.585786))) : (((_t3215 * _t3215) * 0.828427) + (_t3215 * 0.585786))) * 255.000000), 254.500000), -0.500000) + 0.500000)) : 0);
  } // for _curve_s0_v0
  {
   int[] _f26 = new int[12];
   // produce f26
    loop_invariant 0 <= _f26_s0_v1 && _f26_s0_v1 <= 0 + 3;
    loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 4)) && ((0 <= _1) && (_1 < 3)); Perm(_matrix_3200[(_1*4) + _0], 1\2));
    loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 4)) && (0 <= _1)) && (_1 < 3); _matrix_3200[(_1*4) + _0] == pure_matrix_3200((_1*4) + _0));
    loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 4)) && ((0 <= _1) && (_1 < 3)); Perm(_matrix_7000[(_1*4) + _0], 1\2));
    loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 4)) && (0 <= _1)) && (_1 < 3); _matrix_7000[(_1*4) + _0] == pure_matrix_7000((_1*4) + _0));
    loop_invariant (\forall* int _f26_s0_v0_forall, int _f26_s0_v1_forall; (((0 <= _f26_s0_v1_forall) && (_f26_s0_v1_forall < 3)) && (0 <= _f26_s0_v0_forall)) && (_f26_s0_v0_forall < 4); Perm(_f26[(_f26_s0_v1_forall*4) + _f26_s0_v0_forall], 1\1));
   for (int _f26_s0_v1 = 0; _f26_s0_v1 < 0 + 3; _f26_s0_v1++)
   {
    int _t3280 = (_f26_s0_v1 * 4);
     loop_invariant 0 <= _f26_s0_v0 && _f26_s0_v0 <= 0 + 4;
     loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 4)) && ((0 <= _1) && (_1 < 3)); Perm(_matrix_3200[(_1*4) + _0], 1\2));
     loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 4)) && (0 <= _1)) && (_1 < 3); _matrix_3200[(_1*4) + _0] == pure_matrix_3200((_1*4) + _0));
     loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 4)) && ((0 <= _1) && (_1 < 3)); Perm(_matrix_7000[(_1*4) + _0], 1\2));
     loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 4)) && (0 <= _1)) && (_1 < 3); _matrix_7000[(_1*4) + _0] == pure_matrix_7000((_1*4) + _0));
     loop_invariant (\forall* int _f26_s0_v0_forall; (0 <= _f26_s0_v0_forall) && (_f26_s0_v0_forall < 4); Perm(_f26[(_f26_s0_v1*4) + _f26_s0_v0_forall], 1\1));
    for (int _f26_s0_v0 = 0; _f26_s0_v0 < 0 + 4; _f26_s0_v0++)
    {
     int _t3277 = (_f26_s0_v0 + _t3280);
     _f26[_t3277] = rational_to_int((((_matrix_3200[_t3277] * 0.248933) + (_matrix_7000[_t3277] * 0.751067)) * 256.000000));
    } // for _f26_s0_v0
   } // for _f26_s0_v1
   {
    int[] _sharpen_strength_x32 = new int[1];
    // produce sharpen_strength_x32
    _sharpen_strength_x32[0] = 32;
    // produce processed
    // consume sharpen_strength_x32
    // consume f26
    // consume curve
    par threads(int _processed_s0_v1_v3_v4 = 0 .. (0 + 60))
     context 0 <= _processed_s0_v1_v3_v4 && _processed_s0_v1_v3_v4 < 0 + 60;
     context (\forall* int _0, int _1; ((0 <= _0) && (_0 < 2592)) && ((0 <= _1) && (_1 < 1968)); Perm(_input[(_1*2592) + _0], 1\(2*60)));
     context (\forall int _0, int _1; (((0 <= _0) && (_0 < 2592)) && (0 <= _1)) && (_1 < 1968); _input[(_1*2592) + _0] == pure_input((_1*2592) + _0));
     context (\forall* int _v0; (0 <= _v0) && (_v0 < 1024); Perm(_curve[_v0], 1\(2*60)));
     context (\forall* int _v0, int _v1; (((0 <= _v0) && (_v0 < 4)) && (0 <= _v1)) && (_v1 < 3); Perm(_f26[(_v1*4) + _v0], 1\(2*60)));
     context Perm(_sharpen_strength_x32[0], 1\(2*60));
     context (\forall* int _processed_s0_v2_forall, int _processed_s0_v0_forall, int _processed_s0_v1_v5_forall, int _processed_s0_v1_v3_v3_forall; (((((((0 <= _processed_s0_v1_v3_v3_forall) && (_processed_s0_v1_v3_v3_forall < 16)) && (0 <= _processed_s0_v1_v5_forall)) && (_processed_s0_v1_v5_forall < 2)) && (0 <= _processed_s0_v0_forall)) && (_processed_s0_v0_forall < 2560)) && (0 <= _processed_s0_v2_forall)) && (_processed_s0_v2_forall < 3); Perm(_processed[(((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3_forall)*2) + _processed_s0_v1_v5_forall)*2560) + ((_processed_s0_v2_forall*4915200) + _processed_s0_v0_forall)], 1\1));
    {
     {
      int[] _f3 = new int[2568 * 40];
      {
       int[] _deinterleaved = new int[1291 * 20 * 4];
       {
        int[] _curved = new int[2576 * 34 * 3];
        int _t3281 = (_processed_s0_v1_v3_v4 * 16);
         loop_invariant 0 <= _processed_s0_v1_v3_v3 && _processed_s0_v1_v3_v3 <= 0 + 16;
         loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 2592)) && ((0 <= _1) && (_1 < 1968)); Perm(_input[(_1*2592) + _0], 1\(2*60)));
         loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 2592)) && (0 <= _1)) && (_1 < 1968); _input[(_1*2592) + _0] == pure_input((_1*2592) + _0));
         loop_invariant (\forall* int _v0; (0 <= _v0) && (_v0 < 1024); Perm(_curve[_v0], 1\(2*60)));
         loop_invariant (\forall* int _v0, int _v1; (((0 <= _v0) && (_v0 < 4)) && (0 <= _v1)) && (_v1 < 3); Perm(_f26[(_v1*4) + _v0], 1\(2*60)));
         loop_invariant (\forall* int _v0, int _v1; (((-4 <= _v0) && (_v0 < 2564)) && (((_processed_s0_v1_v3_v4*32) + -4) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*32) + 36)); Perm(_f3[(((_v1 - (_processed_s0_v1_v3_v4*32))*2568) + _v0) + 10276], 1\1));
         loop_invariant (\forall* int _v0, int _v1, int _v2; (((((-2 <= _v0) && (_v0 < 1289)) && (((_processed_s0_v1_v3_v4*16) + -2) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*16) + 18))) && (0 <= _v2)) && (_v2 < 4); Perm(_deinterleaved[(((_v1 - (_processed_s0_v1_v3_v4*16))*1291) + ((_v2*25820) + _v0)) + 2584], 1\1));
         loop_invariant (\forall* int _v0, int _v1, int _v2; (((((-1 <= _v0) && (_v0 < 2575)) && (((_processed_s0_v1_v3_v4*32) + -1) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*32) + 33))) && (0 <= _v2)) && (_v2 < 3); Perm(_curved[(((_v1 - (_processed_s0_v1_v3_v4*32))*2576) + ((_v2*87584) + _v0)) + 2577], 1\1));
         loop_invariant Perm(_sharpen_strength_x32[0], 1\(2*60));
         loop_invariant (\forall* int _processed_s0_v2_forall, int _processed_s0_v0_forall, int _processed_s0_v1_v5_forall, int _processed_s0_v1_v3_v3_forall; (((((((0 <= _processed_s0_v1_v3_v3_forall) && (_processed_s0_v1_v3_v3_forall < 16)) && (0 <= _processed_s0_v1_v5_forall)) && (_processed_s0_v1_v5_forall < 2)) && (0 <= _processed_s0_v0_forall)) && (_processed_s0_v0_forall < 2560)) && (0 <= _processed_s0_v2_forall)) && (_processed_s0_v2_forall < 3); Perm(_processed[(((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3_forall)*2) + _processed_s0_v1_v5_forall)*2560) + ((_processed_s0_v2_forall*4915200) + _processed_s0_v0_forall)], 1\1));
        for (int _processed_s0_v1_v3_v3 = 0; _processed_s0_v1_v3_v3 < 0 + 16; _processed_s0_v1_v3_v3++)
        {
         // produce f3
         int _t3282 = (_processed_s0_v1_v3_v3 + _t3281);
          loop_invariant 0 <= _f3_s0_v1_v1 && _f3_s0_v1_v1 <= 0 + 5;
          loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 2592)) && ((0 <= _1) && (_1 < 1968)); Perm(_input[(_1*2592) + _0], 1\(2*60)));
          loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 2592)) && (0 <= _1)) && (_1 < 1968); _input[(_1*2592) + _0] == pure_input((_1*2592) + _0));
          loop_invariant (\forall* int _f3_s0_v0_v6_forall, int _f3_s0_v1_v3_forall, int _f3_s0_v0_v0_forall, int _f3_s0_v1_v1_forall; ((((((((0 <= _f3_s0_v1_v1_forall) && (_f3_s0_v1_v1_forall < 5)) && (0 <= _f3_s0_v0_v0_forall)) && (_f3_s0_v0_v0_forall < 161)) && (0 <= _f3_s0_v1_v3_forall)) && (_f3_s0_v1_v3_forall < 2)) && (0 <= _f3_s0_v0_v6_forall)) && (_f3_s0_v0_v6_forall < 16)) && (((_f3_s0_v0_v0_forall*16) + _f3_s0_v0_v6_forall) <= 2567); Perm(_f3[((((_f3_s0_v1_v1_forall + _processed_s0_v1_v3_v3)*2) + _f3_s0_v1_v3_forall)*2568) + ((_f3_s0_v0_v0_forall*16) + _f3_s0_v0_v6_forall)], 1\1));
         for (int _f3_s0_v1_v1 = 0; _f3_s0_v1_v1 < 0 + 5; _f3_s0_v1_v1++)
         {
          int _t3283 = ((_f3_s0_v1_v1 + _t3282) * 2);
          int _t3284 = ((_f3_s0_v1_v1 + _processed_s0_v1_v3_v3) * 2);
           loop_invariant 0 <= _f3_s0_v0_v0 && _f3_s0_v0_v0 <= 0 + 160;
           loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 2592)) && ((0 <= _1) && (_1 < 1968)); Perm(_input[(_1*2592) + _0], 1\(2*60)));
           loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 2592)) && (0 <= _1)) && (_1 < 1968); _input[(_1*2592) + _0] == pure_input((_1*2592) + _0));
           loop_invariant (\forall* int _f3_s0_v0_v6_forall, int _f3_s0_v1_v3_forall, int _f3_s0_v0_v0_forall; ((((((0 <= _f3_s0_v0_v0_forall) && (_f3_s0_v0_v0_forall < 161)) && (0 <= _f3_s0_v1_v3_forall)) && (_f3_s0_v1_v3_forall < 2)) && (0 <= _f3_s0_v0_v6_forall)) && (_f3_s0_v0_v6_forall < 16)) && (((_f3_s0_v0_v0_forall*16) + _f3_s0_v0_v6_forall) <= 2567); Perm(_f3[((((_f3_s0_v1_v1 + _processed_s0_v1_v3_v3)*2) + _f3_s0_v1_v3_forall)*2568) + ((_f3_s0_v0_v0_forall*16) + _f3_s0_v0_v6_forall)], 1\1));
          for (int _f3_s0_v0_v0 = 0; _f3_s0_v0_v0 < 0 + 160; _f3_s0_v0_v0++)
          {
           int _t3285 = (_f3_s0_v0_v0 * 16);
            loop_invariant 0 <= _f3_s0_v1_v3 && _f3_s0_v1_v3 <= 0 + 2;
            loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 2592)) && ((0 <= _1) && (_1 < 1968)); Perm(_input[(_1*2592) + _0], 1\(2*60)));
            loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 2592)) && (0 <= _1)) && (_1 < 1968); _input[(_1*2592) + _0] == pure_input((_1*2592) + _0));
            loop_invariant (\forall* int _f3_s0_v0_v6_forall, int _f3_s0_v1_v3_forall; (((0 <= _f3_s0_v1_v3_forall) && (_f3_s0_v1_v3_forall < 2)) && (0 <= _f3_s0_v0_v6_forall)) && (_f3_s0_v0_v6_forall < 16); Perm(_f3[(_f3_s0_v0_v0*16) + (((((_f3_s0_v1_v1 + _processed_s0_v1_v3_v3)*2) + _f3_s0_v1_v3_forall)*2568) + _f3_s0_v0_v6_forall)], 1\1));
           for (int _f3_s0_v1_v3 = 0; _f3_s0_v1_v3 < 0 + 2; _f3_s0_v1_v3++)
           {
            int _t3287 = (((_f3_s0_v1_v3 + _t3284) * 2568) + _t3285);
            int _t3286 = (((_f3_s0_v1_v3 + _t3283) * 2592) + _t3285);
             loop_invariant 0 <= _f3_s0_v0_v6 && _f3_s0_v0_v6 <= 0 + 16;
             loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 2592)) && ((0 <= _1) && (_1 < 1968)); Perm(_input[(_1*2592) + _0], 1\(2*60)));
             loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 2592)) && (0 <= _1)) && (_1 < 1968); _input[(_1*2592) + _0] == pure_input((_1*2592) + _0));
             loop_invariant (\forall* int _f3_s0_v0_v6_forall; (0 <= _f3_s0_v0_v6_forall) && (_f3_s0_v0_v6_forall < 16); Perm(_f3[((((_f3_s0_v1_v1 + _processed_s0_v1_v3_v3)*2) + _f3_s0_v1_v3)*2568) + ((_f3_s0_v0_v0*16) + _f3_s0_v0_v6_forall)], 1\1));
            for (int _f3_s0_v0_v6 = 0; _f3_s0_v0_v6 < 0 + 16; _f3_s0_v0_v6++)
            {
             int _t3218 = (_f3_s0_v0_v6 + _t3286);
             _f3[(_f3_s0_v0_v6 + _t3287)] = max(min(max(max(max(_input[(_t3218 + 15564)], _input[(_t3218 + 25932)]), _input[(_t3218 + 20750)]), _input[(_t3218 + 20746)]), _input[(_t3218 + 20748)]), 0);
            } // for _f3_s0_v0_v6
           } // for _f3_s0_v1_v3
          } // for _f3_s0_v0_v0
          int _t3288 = ((_f3_s0_v1_v1 + _t3282) * 2);
          int _t3289 = ((_f3_s0_v1_v1 + _processed_s0_v1_v3_v3) * 2);
           loop_invariant 0 <= _f3_s0_v1_v3 && _f3_s0_v1_v3 <= 0 + 2;
           loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 2592)) && ((0 <= _1) && (_1 < 1968)); Perm(_input[(_1*2592) + _0], 1\(2*60)));
           loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 2592)) && (0 <= _1)) && (_1 < 1968); _input[(_1*2592) + _0] == pure_input((_1*2592) + _0));
           loop_invariant (\forall* int _f3_s0_v0_v6_forall, int _f3_s0_v1_v3_forall; ((((0 <= _f3_s0_v1_v3_forall) && (_f3_s0_v1_v3_forall < 2)) && (0 <= _f3_s0_v0_v6_forall)) && (_f3_s0_v0_v6_forall < 16)) && (_f3_s0_v0_v6_forall <= 7); Perm(_f3[(((((_f3_s0_v1_v1 + _processed_s0_v1_v3_v3)*2) + _f3_s0_v1_v3_forall)*2568) + _f3_s0_v0_v6_forall) + 2560], 1\1));
          for (int _f3_s0_v1_v3 = 0; _f3_s0_v1_v3 < 0 + 2; _f3_s0_v1_v3++)
          {
           int _t3291 = ((_f3_s0_v1_v3 + _t3289) * 2568);
           int _t3290 = ((_f3_s0_v1_v3 + _t3288) * 2592);
            loop_invariant 0 <= _f3_s0_v0_v6 && _f3_s0_v0_v6 <= 0 + 8;
            loop_invariant (\forall* int _0, int _1; ((0 <= _0) && (_0 < 2592)) && ((0 <= _1) && (_1 < 1968)); Perm(_input[(_1*2592) + _0], 1\(2*60)));
            loop_invariant (\forall int _0, int _1; (((0 <= _0) && (_0 < 2592)) && (0 <= _1)) && (_1 < 1968); _input[(_1*2592) + _0] == pure_input((_1*2592) + _0));
            loop_invariant (\forall* int _f3_s0_v0_v6_forall; ((0 <= _f3_s0_v0_v6_forall) && (_f3_s0_v0_v6_forall < 16)) && (_f3_s0_v0_v6_forall <= 7); Perm(_f3[(((((_f3_s0_v1_v1 + _processed_s0_v1_v3_v3)*2) + _f3_s0_v1_v3)*2568) + _f3_s0_v0_v6_forall) + 2560], 1\1));
           for (int _f3_s0_v0_v6 = 0; _f3_s0_v0_v6 < 0 + 8; _f3_s0_v0_v6++)
           {
            int _t3278 = (_f3_s0_v0_v6 + _t3290);
            _f3[((_f3_s0_v0_v6 + _t3291) + 2560)] = max(min(max(max(max(_input[(_t3278 + 18124)], _input[(_t3278 + 28492)]), _input[(_t3278 + 23310)]), _input[(_t3278 + 23306)]), _input[(_t3278 + 23308)]), 0);
           } // for _f3_s0_v0_v6
          } // for _f3_s0_v1_v3
         } // for _f3_s0_v1_v1
         // produce deinterleaved
         // consume f3
         int _t3292 = (_processed_s0_v1_v3_v3 + _t3281);
          loop_invariant (_t3292 + -2) <= _deinterleaved_s0_v1 && _deinterleaved_s0_v1 <= (_t3292 + -2) + 5;
          loop_invariant (\forall* int _v0, int _v1; (((-4 <= _v0) && (_v0 < 2564)) && (((_processed_s0_v1_v3_v4*32) + -4) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*32) + 36)); Perm(_f3[(((_v1 - (_processed_s0_v1_v3_v4*32))*2568) + _v0) + 10276], 1\2));
          loop_invariant (\forall* int _deinterleaved_s0_v2_forall, int _deinterleaved_s0_v0_forall, int _deinterleaved_s0_v1_forall; ((((((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + -2) <= _deinterleaved_s0_v1_forall) && (_deinterleaved_s0_v1_forall < (((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + 3))) && (-2 <= _deinterleaved_s0_v0_forall)) && (_deinterleaved_s0_v0_forall < 1282)) && (0 <= _deinterleaved_s0_v2_forall)) && (_deinterleaved_s0_v2_forall < 4); Perm(_deinterleaved[(((_deinterleaved_s0_v1_forall - (_processed_s0_v1_v3_v4*16))*1291) + ((_deinterleaved_s0_v2_forall*25820) + _deinterleaved_s0_v0_forall)) + 2584], 1\1));
         for (int _deinterleaved_s0_v1 = (_t3292 + -2); _deinterleaved_s0_v1 < (_t3292 + -2) + 5; _deinterleaved_s0_v1++)
         {
          int _t3293 = (_deinterleaved_s0_v1 - _t3281);
           loop_invariant -2 <= _deinterleaved_s0_v0 && _deinterleaved_s0_v0 <= -2 + 1284;
           loop_invariant (\forall* int _v0, int _v1; (((-4 <= _v0) && (_v0 < 2564)) && (((_processed_s0_v1_v3_v4*32) + -4) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*32) + 36)); Perm(_f3[(((_v1 - (_processed_s0_v1_v3_v4*32))*2568) + _v0) + 10276], 1\2));
           loop_invariant (\forall* int _deinterleaved_s0_v2_forall, int _deinterleaved_s0_v0_forall; (((-2 <= _deinterleaved_s0_v0_forall) && (_deinterleaved_s0_v0_forall < 1282)) && (0 <= _deinterleaved_s0_v2_forall)) && (_deinterleaved_s0_v2_forall < 4); Perm(_deinterleaved[(((_deinterleaved_s0_v1 - (_processed_s0_v1_v3_v4*16))*1291) + ((_deinterleaved_s0_v2_forall*25820) + _deinterleaved_s0_v0_forall)) + 2584], 1\1));
          for (int _deinterleaved_s0_v0 = -2; _deinterleaved_s0_v0 < -2 + 1284; _deinterleaved_s0_v0++)
          {
           int _t3294 = ((_t3293 * 2568) + _deinterleaved_s0_v0);
           int _t3295 = ((_t3293 * 1291) + _deinterleaved_s0_v0);
            loop_invariant 0 <= _deinterleaved_s0_v2 && _deinterleaved_s0_v2 <= 0 + 4;
            loop_invariant (\forall* int _v0, int _v1; (((-4 <= _v0) && (_v0 < 2564)) && (((_processed_s0_v1_v3_v4*32) + -4) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*32) + 36)); Perm(_f3[(((_v1 - (_processed_s0_v1_v3_v4*32))*2568) + _v0) + 10276], 1\2));
            loop_invariant (\forall* int _deinterleaved_s0_v2_forall; (0 <= _deinterleaved_s0_v2_forall) && (_deinterleaved_s0_v2_forall < 4); Perm(_deinterleaved[((((_deinterleaved_s0_v2_forall*20) + (_deinterleaved_s0_v1 - (_processed_s0_v1_v3_v4*16)))*1291) + _deinterleaved_s0_v0) + 2584], 1\1));
           for (int _deinterleaved_s0_v2 = 0; _deinterleaved_s0_v2 < 0 + 4; _deinterleaved_s0_v2++)
           {
            _deinterleaved[(((_deinterleaved_s0_v2 * 25820) + _t3295) + 2584)] = ((_deinterleaved_s0_v2 == 0) ? _f3[((_t3294 * 2) + 10276)] : ((_deinterleaved_s0_v2 == 1) ? _f3[((_t3294 * 2) + 10277)] : ((_deinterleaved_s0_v2 == 2) ? _f3[((_t3294 * 2) + 12844)] : ((_deinterleaved_s0_v2 == 3) ? _f3[((_t3294 * 2) + 12845)] : _f3[((_t3294 * 2) + 12845)]))));
           } // for _deinterleaved_s0_v2
          } // for _deinterleaved_s0_v0
         } // for _deinterleaved_s0_v1
         // produce curved
         // consume deinterleaved
          loop_invariant 0 <= _curved_s0_v1_v1 && _curved_s0_v1_v1 <= 0 + 2;
          loop_invariant (\forall* int _v0; (0 <= _v0) && (_v0 < 1024); Perm(_curve[_v0], 1\(2*60)));
          loop_invariant (\forall* int _v0, int _v1; (((0 <= _v0) && (_v0 < 4)) && (0 <= _v1)) && (_v1 < 3); Perm(_f26[(_v1*4) + _v0], 1\(2*60)));
          loop_invariant (\forall* int _v0, int _v1, int _v2; (((((-2 <= _v0) && (_v0 < 1289)) && (((_processed_s0_v1_v3_v4*16) + -2) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*16) + 18))) && (0 <= _v2)) && (_v2 < 4); Perm(_deinterleaved[(((_v1 - (_processed_s0_v1_v3_v4*16))*1291) + ((_v2*25820) + _v0)) + 2584], 1\2));
          loop_invariant (\forall* int _curved_s0_v2_forall, int _curved_s0_v0_v6_forall, int _curved_s0_v1_v3_forall, int _curved_s0_v0_v0_forall, int _curved_s0_v1_v1_forall; (((((((((0 <= _curved_s0_v1_v1_forall) && (_curved_s0_v1_v1_forall < 2)) && (0 <= _curved_s0_v0_v0_forall)) && (_curved_s0_v0_v0_forall < 161)) && (0 <= _curved_s0_v1_v3_forall)) && (_curved_s0_v1_v3_forall < 2)) && (0 <= _curved_s0_v0_v6_forall)) && (_curved_s0_v0_v6_forall < 16)) && (0 <= _curved_s0_v2_forall)) && (_curved_s0_v2_forall < 3); Perm(_curved[((((_curved_s0_v1_v1_forall + _processed_s0_v1_v3_v3)*2) + _curved_s0_v1_v3_forall)*2576) + ((((_curved_s0_v2_forall*5474) + _curved_s0_v0_v0_forall)*16) + _curved_s0_v0_v6_forall)], 1\1));
         for (int _curved_s0_v1_v1 = 0; _curved_s0_v1_v1 < 0 + 2; _curved_s0_v1_v1++)
         {
          int _t3297 = (((_processed_s0_v1_v3_v3 + _t3281) + _curved_s0_v1_v1) * 2);
          int _t3298 = ((_curved_s0_v1_v1 + _processed_s0_v1_v3_v3) * 2);
           loop_invariant 0 <= _curved_s0_v0_v0 && _curved_s0_v0_v0 <= 0 + 161;
           loop_invariant (\forall* int _v0; (0 <= _v0) && (_v0 < 1024); Perm(_curve[_v0], 1\(2*60)));
           loop_invariant (\forall* int _v0, int _v1; (((0 <= _v0) && (_v0 < 4)) && (0 <= _v1)) && (_v1 < 3); Perm(_f26[(_v1*4) + _v0], 1\(2*60)));
           loop_invariant (\forall* int _v0, int _v1, int _v2; (((((-2 <= _v0) && (_v0 < 1289)) && (((_processed_s0_v1_v3_v4*16) + -2) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*16) + 18))) && (0 <= _v2)) && (_v2 < 4); Perm(_deinterleaved[(((_v1 - (_processed_s0_v1_v3_v4*16))*1291) + ((_v2*25820) + _v0)) + 2584], 1\2));
           loop_invariant (\forall* int _curved_s0_v2_forall, int _curved_s0_v0_v6_forall, int _curved_s0_v1_v3_forall, int _curved_s0_v0_v0_forall; (((((((0 <= _curved_s0_v0_v0_forall) && (_curved_s0_v0_v0_forall < 161)) && (0 <= _curved_s0_v1_v3_forall)) && (_curved_s0_v1_v3_forall < 2)) && (0 <= _curved_s0_v0_v6_forall)) && (_curved_s0_v0_v6_forall < 16)) && (0 <= _curved_s0_v2_forall)) && (_curved_s0_v2_forall < 3); Perm(_curved[((((_curved_s0_v1_v1 + _processed_s0_v1_v3_v3)*2) + _curved_s0_v1_v3_forall)*2576) + ((((_curved_s0_v2_forall*5474) + _curved_s0_v0_v0_forall)*16) + _curved_s0_v0_v6_forall)], 1\1));
          for (int _curved_s0_v0_v0 = 0; _curved_s0_v0_v0 < 0 + 161; _curved_s0_v0_v0++)
          {
           {
            int[] _f27 = new int[16 * 2 * 3];
            // produce f27
            int _t3299 = (_curved_s0_v0_v0 * 16);
             loop_invariant (_t3297 + -1) <= _f27_s0_v1 && _f27_s0_v1 <= (_t3297 + -1) + 2;
             loop_invariant (\forall* int _v0, int _v1; (((0 <= _v0) && (_v0 < 4)) && (0 <= _v1)) && (_v1 < 3); Perm(_f26[(_v1*4) + _v0], 1\(2*60)));
             loop_invariant (\forall* int _v0, int _v1, int _v2; (((((-2 <= _v0) && (_v0 < 1289)) && (((_processed_s0_v1_v3_v4*16) + -2) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*16) + 18))) && (0 <= _v2)) && (_v2 < 4); Perm(_deinterleaved[(((_v1 - (_processed_s0_v1_v3_v4*16))*1291) + ((_v2*25820) + _v0)) + 2584], 1\2));
             loop_invariant (\forall* int _f27_s0_v2_forall, int _f27_s0_v0_forall, int _f27_s0_v1_forall; ((((((((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2) + -1) <= _f27_s0_v1_forall) && (_f27_s0_v1_forall < (((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2) + 1))) && (((_curved_s0_v0_v0*16) + -1) <= _f27_s0_v0_forall)) && (_f27_s0_v0_forall < ((_curved_s0_v0_v0*16) + 15))) && (0 <= _f27_s0_v2_forall)) && (_f27_s0_v2_forall < 3); Perm(_f27[((((_f27_s0_v1_forall - ((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2))*16) + ((_f27_s0_v2_forall*32) + _f27_s0_v0_forall)) - (_curved_s0_v0_v0*16)) + 17], 1\1));
            for (int _f27_s0_v1 = (_t3297 + -1); _f27_s0_v1 < (_t3297 + -1) + 2; _f27_s0_v1++)
            {
             bool _t3300 = (hmod(_f27_s0_v1, 2) == 0);
             int _t3301 = ((hdiv(_f27_s0_v1, 2) - _t3281) * 1291);
             int _t3302 = (((_f27_s0_v1 - _t3297) * 16) - _t3299);
              loop_invariant (_t3299 + -1) <= _f27_s0_v0 && _f27_s0_v0 <= (_t3299 + -1) + 16;
              loop_invariant (\forall* int _v0, int _v1; (((0 <= _v0) && (_v0 < 4)) && (0 <= _v1)) && (_v1 < 3); Perm(_f26[(_v1*4) + _v0], 1\(2*60)));
              loop_invariant (\forall* int _v0, int _v1, int _v2; (((((-2 <= _v0) && (_v0 < 1289)) && (((_processed_s0_v1_v3_v4*16) + -2) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*16) + 18))) && (0 <= _v2)) && (_v2 < 4); Perm(_deinterleaved[(((_v1 - (_processed_s0_v1_v3_v4*16))*1291) + ((_v2*25820) + _v0)) + 2584], 1\2));
              loop_invariant (\forall* int _f27_s0_v2_forall, int _f27_s0_v0_forall; (((((_curved_s0_v0_v0*16) + -1) <= _f27_s0_v0_forall) && (_f27_s0_v0_forall < ((_curved_s0_v0_v0*16) + 15))) && (0 <= _f27_s0_v2_forall)) && (_f27_s0_v2_forall < 3); Perm(_f27[(((_f27_s0_v1 - ((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2))*16) + (((_f27_s0_v2_forall*32) + _f27_s0_v0_forall) - (_curved_s0_v0_v0*16))) + 17], 1\1));
             for (int _f27_s0_v0 = (_t3299 + -1); _f27_s0_v0 < (_t3299 + -1) + 16; _f27_s0_v0++)
             {
              bool _t3303 = (hmod(_f27_s0_v0, 2) == 0);
              int _t3304 = (hdiv(_f27_s0_v0, 2) + _t3301);
              int _t3305 = (_f27_s0_v0 + _t3302);
               loop_invariant 0 <= _f27_s0_v2 && _f27_s0_v2 <= 0 + 3;
               loop_invariant (\forall* int _v0, int _v1; (((0 <= _v0) && (_v0 < 4)) && (0 <= _v1)) && (_v1 < 3); Perm(_f26[(_v1*4) + _v0], 1\(2*60)));
               loop_invariant (\forall* int _v0, int _v1, int _v2; (((((-2 <= _v0) && (_v0 < 1289)) && (((_processed_s0_v1_v3_v4*16) + -2) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*16) + 18))) && (0 <= _v2)) && (_v2 < 4); Perm(_deinterleaved[(((_v1 - (_processed_s0_v1_v3_v4*16))*1291) + ((_v2*25820) + _v0)) + 2584], 1\2));
               loop_invariant (\forall* int _f27_s0_v2_forall; (0 <= _f27_s0_v2_forall) && (_f27_s0_v2_forall < 3); Perm(_f27[(((((_f27_s0_v2_forall*2) - _curved_s0_v0_v0) + (_f27_s0_v1 - ((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2)))*16) + _f27_s0_v0) + 17], 1\1));
              for (int _f27_s0_v2 = 0; _f27_s0_v2 < 0 + 3; _f27_s0_v2++)
              {
               int _t3225 = _deinterleaved[(_t3304 + 2584)];
               int _t3226 = _deinterleaved[(_t3304 + 80043)];
               int _t3227 = _deinterleaved[(_t3304 + 80044)];
               int _t3228 = _deinterleaved[(_t3304 + 3875)];
               int _t3233 = ((((_t3226 < _t3227) ? (_t3227 - _t3226) : (_t3226 - _t3227)) < ((_t3228 < _t3225) ? (_t3225 - _t3228) : (_t3228 - _t3225))) ? hdiv(((_t3226 + _t3227) + 1), 2) : hdiv(((_t3228 + _t3225) + 1), 2));
               int _t3235 = _deinterleaved[(_t3304 + 78752)];
               int _t3236 = _deinterleaved[(_t3304 + 78753)];
               int _t3237 = _deinterleaved[(_t3304 + 1293)];
               int _t3240_s = ((((_t3235 < _t3236) ? (_t3236 - _t3235) : (_t3235 - _t3236)) < ((_t3225 < _t3237) ? (_t3237 - _t3225) : (_t3225 - _t3237))) ? hdiv(((_t3235 + _t3236) + 1), 2) : hdiv(((_t3225 + _t3237) + 1), 2));
               int _t3241 = _deinterleaved[(_t3304 + 54224)];
               int _t3243 = _deinterleaved[(_t3304 + 52933)];
               int _t3245 = _deinterleaved[(_t3304 + 52934)];
               int _t3246 = _deinterleaved[(_t3304 + 54225)];
               int _t3247 = _deinterleaved[(_t3304 + 2585)];
               int _t3249 = ((((_t3247 < _t3225) ? (_t3225 - _t3247) : (_t3247 - _t3225)) < ((_t3236 < _t3227) ? (_t3227 - _t3236) : (_t3236 - _t3227))) ? hdiv(((_t3247 + _t3225) + 1), 2) : hdiv(((_t3236 + _t3227) + 1), 2));
               int _t3250 = _deinterleaved[(_t3304 + 78754)];
               int _t3251 = _deinterleaved[(_t3304 + 1294)];
               int _t3252 = _deinterleaved[(_t3304 + 80045)];
               int _t3253 = _deinterleaved[(_t3304 + 3876)];
               int _t3255_s = ((((_t3227 < _t3252) ? (_t3252 - _t3227) : (_t3227 - _t3252)) < ((_t3253 < _t3247) ? (_t3247 - _t3253) : (_t3253 - _t3247))) ? hdiv(((_t3227 + _t3252) + 1), 2) : hdiv(((_t3253 + _t3247) + 1), 2));
               int _t3257_s = (_t3300 ? (_t3303 ? ((_t3225 - hdiv(((_t3233 + _t3240_s) + 1), 2)) + hdiv(((_t3241 + _t3243) + 1), 2)) : ((((_t3241 < _t3245) ? (_t3245 - _t3241) : (_t3241 - _t3245)) < ((_t3246 < _t3243) ? (_t3243 - _t3246) : (_t3246 - _t3243))) ? ((_t3249 - hdiv(((_t3233 + ((((_t3236 < _t3250) ? (_t3250 - _t3236) : (_t3236 - _t3250)) < ((_t3247 < _t3251) ? (_t3251 - _t3247) : (_t3247 - _t3251))) ? hdiv(((_t3236 + _t3250) + 1), 2) : hdiv(((_t3247 + _t3251) + 1), 2))) + 1), 2)) + hdiv(((_t3241 + _t3245) + 1), 2)) : ((_t3249 - hdiv(((_t3255_s + _t3240_s) + 1), 2)) + hdiv(((_t3246 + _t3243) + 1), 2)))) : (_t3303 ? _t3241 : ((_t3227 - hdiv(((_t3233 + _t3255_s) + 1), 2)) + hdiv(((_t3241 + _t3246) + 1), 2))));
               int _t3258_s = (_t3300 ? (_t3303 ? _t3225 : _t3249) : (_t3303 ? _t3233 : _t3227));
               int _t3260 = _deinterleaved[(_t3304 + 2583)];
               int _t3261_s = ((((_t3225 < _t3260) ? (_t3260 - _t3225) : (_t3225 - _t3260)) < ((_t3235 < _t3226) ? (_t3226 - _t3235) : (_t3235 - _t3226))) ? hdiv(((_t3225 + _t3260) + 1), 2) : hdiv(((_t3235 + _t3226) + 1), 2));
               int _t3262 = _deinterleaved[(_t3304 + 28403)];
               int _t3264 = _deinterleaved[(_t3304 + 28404)];
               int _t3266 = _deinterleaved[(_t3304 + 29694)];
               int _t3267 = _deinterleaved[(_t3304 + 29695)];
               int _t3268 = _deinterleaved[(_t3304 + 3874)];
               int _t3269 = _deinterleaved[(_t3304 + 81334)];
               int _t3270 = _deinterleaved[(_t3304 + 81335)];
               int _t3271_s = ((((_t3253 < _t3228) ? (_t3228 - _t3253) : (_t3253 - _t3228)) < ((_t3227 < _t3270) ? (_t3270 - _t3227) : (_t3227 - _t3270))) ? hdiv(((_t3253 + _t3228) + 1), 2) : hdiv(((_t3227 + _t3270) + 1), 2));
               int _t3273_s = (_t3300 ? (_t3303 ? ((_t3225 - hdiv(((_t3249 + _t3261_s) + 1), 2)) + hdiv(((_t3262 + _t3264) + 1), 2)) : _t3264) : (_t3303 ? ((((_t3264 < _t3266) ? (_t3266 - _t3264) : (_t3264 - _t3266)) < ((_t3262 < _t3267) ? (_t3267 - _t3262) : (_t3262 - _t3267))) ? ((_t3233 - hdiv(((_t3249 + ((((_t3228 < _t3268) ? (_t3268 - _t3228) : (_t3228 - _t3268)) < ((_t3226 < _t3269) ? (_t3269 - _t3226) : (_t3226 - _t3269))) ? hdiv(((_t3228 + _t3268) + 1), 2) : hdiv(((_t3226 + _t3269) + 1), 2))) + 1), 2)) + hdiv(((_t3264 + _t3266) + 1), 2)) : ((_t3233 - hdiv(((_t3261_s + _t3271_s) + 1), 2)) + hdiv(((_t3262 + _t3267) + 1), 2))) : ((_t3227 - hdiv(((_t3249 + _t3271_s) + 1), 2)) + hdiv(((_t3264 + _t3267) + 1), 2))));
               _f27[(((_f27_s0_v2 * 32) + _t3305) + 17)] = ((_f27_s0_v2 == 0) ? hdiv(((_f26[0] * _t3273_s) + ((_f26[1] * _t3258_s) + ((_f26[2] * _t3257_s) + _f26[3]))), 256) : ((_f27_s0_v2 == 1) ? hdiv(((_f26[4] * _t3273_s) + ((_f26[5] * _t3258_s) + ((_f26[6] * _t3257_s) + _f26[7]))), 256) : ((_f27_s0_v2 == 2) ? hdiv(((_f26[8] * _t3273_s) + ((_f26[9] * _t3258_s) + ((_f26[10] * _t3257_s) + _f26[11]))), 256) : hdiv(((_f26[8] * _t3273_s) + ((_f26[9] * _t3258_s) + ((_f26[10] * _t3257_s) + _f26[11]))), 256))));
              } // for _f27_s0_v2
             } // for _f27_s0_v0
            } // for _f27_s0_v1
            // consume f27
            int _t3306 = (_curved_s0_v0_v0 * 16);
             loop_invariant 0 <= _curved_s0_v1_v3 && _curved_s0_v1_v3 <= 0 + 2;
             loop_invariant (\forall* int _v0; (0 <= _v0) && (_v0 < 1024); Perm(_curve[_v0], 1\(2*60)));
             loop_invariant (\forall* int _v0, int _v1, int _v2; (((((((_curved_s0_v0_v0*16) + -1) <= _v0) && (_v0 < ((_curved_s0_v0_v0*16) + 15))) && ((((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2) + -1) <= _v1)) && (_v1 < (((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2) + 1))) && (0 <= _v2)) && (_v2 < 3); Perm(_f27[((((_v1 - ((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2))*16) + ((_v2*32) + _v0)) - (_curved_s0_v0_v0*16)) + 17], 1\2));
             loop_invariant (\forall* int _curved_s0_v2_forall, int _curved_s0_v0_v6_forall, int _curved_s0_v1_v3_forall; (((((0 <= _curved_s0_v1_v3_forall) && (_curved_s0_v1_v3_forall < 2)) && (0 <= _curved_s0_v0_v6_forall)) && (_curved_s0_v0_v6_forall < 16)) && (0 <= _curved_s0_v2_forall)) && (_curved_s0_v2_forall < 3); Perm(_curved[(_curved_s0_v0_v0*16) + (((((_curved_s0_v1_v1 + _processed_s0_v1_v3_v3)*2) + _curved_s0_v1_v3_forall)*2576) + ((_curved_s0_v2_forall*87584) + _curved_s0_v0_v6_forall))], 1\1));
            for (int _curved_s0_v1_v3 = 0; _curved_s0_v1_v3 < 0 + 2; _curved_s0_v1_v3++)
            {
             int _t3307 = (_curved_s0_v1_v3 * 16);
             int _t3308 = (((_curved_s0_v1_v3 + _t3298) * 2576) + _t3306);
              loop_invariant 0 <= _curved_s0_v0_v6 && _curved_s0_v0_v6 <= 0 + 16;
              loop_invariant (\forall* int _v0; (0 <= _v0) && (_v0 < 1024); Perm(_curve[_v0], 1\(2*60)));
              loop_invariant (\forall* int _v0, int _v1, int _v2; (((((((_curved_s0_v0_v0*16) + -1) <= _v0) && (_v0 < ((_curved_s0_v0_v0*16) + 15))) && ((((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2) + -1) <= _v1)) && (_v1 < (((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2) + 1))) && (0 <= _v2)) && (_v2 < 3); Perm(_f27[((((_v1 - ((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2))*16) + ((_v2*32) + _v0)) - (_curved_s0_v0_v0*16)) + 17], 1\2));
              loop_invariant (\forall* int _curved_s0_v2_forall, int _curved_s0_v0_v6_forall; (((0 <= _curved_s0_v0_v6_forall) && (_curved_s0_v0_v6_forall < 16)) && (0 <= _curved_s0_v2_forall)) && (_curved_s0_v2_forall < 3); Perm(_curved[((((_curved_s0_v1_v1 + _processed_s0_v1_v3_v3)*2) + _curved_s0_v1_v3)*2576) + ((_curved_s0_v0_v0*16) + ((_curved_s0_v2_forall*87584) + _curved_s0_v0_v6_forall))], 1\1));
             for (int _curved_s0_v0_v6 = 0; _curved_s0_v0_v6 < 0 + 16; _curved_s0_v0_v6++)
             {
              int _t3310 = (_curved_s0_v0_v6 + _t3308);
              int _t3309 = (_curved_s0_v0_v6 + _t3307);
               loop_invariant 0 <= _curved_s0_v2 && _curved_s0_v2 <= 0 + 3;
               loop_invariant (\forall* int _v0; (0 <= _v0) && (_v0 < 1024); Perm(_curve[_v0], 1\(2*60)));
               loop_invariant (\forall* int _v0, int _v1, int _v2; (((((((_curved_s0_v0_v0*16) + -1) <= _v0) && (_v0 < ((_curved_s0_v0_v0*16) + 15))) && ((((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2) + -1) <= _v1)) && (_v1 < (((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2) + 1))) && (0 <= _v2)) && (_v2 < 3); Perm(_f27[((((_v1 - ((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3) + _curved_s0_v1_v1)*2))*16) + ((_v2*32) + _v0)) - (_curved_s0_v0_v0*16)) + 17], 1\2));
               loop_invariant (\forall* int _curved_s0_v2_forall; (0 <= _curved_s0_v2_forall) && (_curved_s0_v2_forall < 3); Perm(_curved[((((((_curved_s0_v1_v1 + _processed_s0_v1_v3_v3)*2) + _curved_s0_v1_v3)*161) + ((_curved_s0_v2_forall*5474) + _curved_s0_v0_v0))*16) + _curved_s0_v0_v6], 1\1));
              for (int _curved_s0_v2 = 0; _curved_s0_v2 < 0 + 3; _curved_s0_v2++)
              {
               _curved[((_curved_s0_v2 * 87584) + _t3310)] = _curve[max(min(_f27[((_curved_s0_v2 * 32) + _t3309)], 1023), 0)];
              } // for _curved_s0_v2
             } // for _curved_s0_v0_v6
            } // for _curved_s0_v1_v3
           } // alloc _f27
          } // for _curved_s0_v0_v0
         } // for _curved_s0_v1_v1
         // consume curved
         int _t3312 = ((_processed_s0_v1_v3_v3 + _t3281) * 2);
         int _t3311 = (_processed_s0_v1_v3_v3 * 2);
          loop_invariant 0 <= _processed_s0_v1_v5 && _processed_s0_v1_v5 <= 0 + 2;
          loop_invariant (\forall* int _v0, int _v1, int _v2; (((((-1 <= _v0) && (_v0 < 2575)) && (((_processed_s0_v1_v3_v4*32) + -1) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*32) + 33))) && (0 <= _v2)) && (_v2 < 3); Perm(_curved[(((_v1 - (_processed_s0_v1_v3_v4*32))*2576) + ((_v2*87584) + _v0)) + 2577], 1\2));
          loop_invariant Perm(_sharpen_strength_x32[0], 1\(2*60));
          loop_invariant (\forall* int _processed_s0_v2_forall, int _processed_s0_v0_forall, int _processed_s0_v1_v5_forall; (((((0 <= _processed_s0_v1_v5_forall) && (_processed_s0_v1_v5_forall < 2)) && (0 <= _processed_s0_v0_forall)) && (_processed_s0_v0_forall < 2560)) && (0 <= _processed_s0_v2_forall)) && (_processed_s0_v2_forall < 3); Perm(_processed[(((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3)*2) + _processed_s0_v1_v5_forall)*2560) + ((_processed_s0_v2_forall*4915200) + _processed_s0_v0_forall)], 1\1));
         for (int _processed_s0_v1_v5 = 0; _processed_s0_v1_v5 < 0 + 2; _processed_s0_v1_v5++)
         {
          int _t3314 = ((_processed_s0_v1_v5 + _t3312) * 2560);
          int _t3313 = ((_processed_s0_v1_v5 + _t3311) * 2576);
           loop_invariant 0 <= _processed_s0_v0 && _processed_s0_v0 <= 0 + 2560;
           loop_invariant (\forall* int _v0, int _v1, int _v2; (((((-1 <= _v0) && (_v0 < 2575)) && (((_processed_s0_v1_v3_v4*32) + -1) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*32) + 33))) && (0 <= _v2)) && (_v2 < 3); Perm(_curved[(((_v1 - (_processed_s0_v1_v3_v4*32))*2576) + ((_v2*87584) + _v0)) + 2577], 1\2));
           loop_invariant Perm(_sharpen_strength_x32[0], 1\(2*60));
           loop_invariant (\forall* int _processed_s0_v2_forall, int _processed_s0_v0_forall; (((0 <= _processed_s0_v0_forall) && (_processed_s0_v0_forall < 2560)) && (0 <= _processed_s0_v2_forall)) && (_processed_s0_v2_forall < 3); Perm(_processed[(((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3)*2) + _processed_s0_v1_v5)*2560) + ((_processed_s0_v2_forall*4915200) + _processed_s0_v0_forall)], 1\1));
          for (int _processed_s0_v0 = 0; _processed_s0_v0 < 0 + 2560; _processed_s0_v0++)
          {
           int _t3316 = (_processed_s0_v0 + _t3314);
           int _t3315 = (_processed_s0_v0 + _t3313);
            loop_invariant 0 <= _processed_s0_v2 && _processed_s0_v2 <= 0 + 3;
            loop_invariant (\forall* int _v0, int _v1, int _v2; (((((-1 <= _v0) && (_v0 < 2575)) && (((_processed_s0_v1_v3_v4*32) + -1) <= _v1)) && (_v1 < ((_processed_s0_v1_v3_v4*32) + 33))) && (0 <= _v2)) && (_v2 < 3); Perm(_curved[(((_v1 - (_processed_s0_v1_v3_v4*32))*2576) + ((_v2*87584) + _v0)) + 2577], 1\2));
            loop_invariant Perm(_sharpen_strength_x32[0], 1\(2*60));
            loop_invariant (\forall* int _processed_s0_v2_forall; (0 <= _processed_s0_v2_forall) && (_processed_s0_v2_forall < 3); Perm(_processed[(((_processed_s0_v2_forall*1920) + ((((_processed_s0_v1_v3_v4*16) + _processed_s0_v1_v3_v3)*2) + _processed_s0_v1_v5))*2560) + _processed_s0_v0], 1\1));
           for (int _processed_s0_v2 = 0; _processed_s0_v2 < 0 + 3; _processed_s0_v2++)
           {
            int _t3274 = ((_processed_s0_v2 * 87584) + _t3315);
            int _t3275 = _curved[(_t3274 + 2577)];
            _processed[((_processed_s0_v2 * 4915200) + _t3316)] = max(min((hdiv(((_t3275 - hdiv(((hdiv(((hdiv(((hdiv(((_curved[_t3274] + _curved[(_t3274 + 5152)]) + 1), 2) + _curved[(_t3274 + 2576)]) + 1), 2) + hdiv(((hdiv(((_curved[(_t3274 + 2)] + _curved[(_t3274 + 5154)]) + 1), 2) + _curved[(_t3274 + 2578)]) + 1), 2)) + 1), 2) + hdiv(((hdiv(((_curved[(_t3274 + 1)] + _curved[(_t3274 + 5153)]) + 1), 2) + _t3275) + 1), 2)) + 1), 2)) * _sharpen_strength_x32[0]), 32) + _t3275), 255), 0);
           } // for _processed_s0_v2
          } // for _processed_s0_v0
         } // for _processed_s0_v1_v5
        } // for _processed_s0_v1_v3_v3
       } // alloc _curved
      } // alloc _deinterleaved
     } // alloc _f3
    } // for _processed_s0_v1_v3_v4
   } // alloc _sharpen_strength_x32
  } // alloc _f26
 } // alloc _curve
 return 0;
}
